services:
  rabbitmq:
    image: rabbitmq:3-management
    ports:
      - "5672:5672"
      - "15672:15672"

  producer_worker1:
    build:
      context: ./producer
      dockerfile: Dockerfile
    environment:
      - PRODUCER_QUEUE=test_queue
      - SENTINEL_PORT=9001
      - NODE_ID=producer_worker1
    ports:
      - "9001:9001"
    depends_on:
      - rabbitmq
    volumes:
      - ./producer:/app
      - ./rabbitmq:/app/rabbitmq
      - ./common:/app/common
      - ./producer/persistence/producer_worker1:/app/persistence
      
  producer_worker2:
    build:
      context: ./producer
      dockerfile: Dockerfile
    environment:
      - PRODUCER_QUEUE=test_queue
      - SENTINEL_PORT=9011
      - NODE_ID=producer_worker2
    ports:
      - "9011:9001"
    depends_on:
      - rabbitmq
    volumes:
      - ./producer:/app
      - ./rabbitmq:/app/rabbitmq
      - ./common:/app/common
      - ./producer/persistence/producer_worker2:/app/persistence

  producer_worker3:
    build:
      context: ./producer
      dockerfile: Dockerfile
    environment:
      - PRODUCER_QUEUE=test_queue
      - SENTINEL_PORT=9012
      - NODE_ID=producer_worker3
    ports:
      - "9012:9001"
    depends_on:
      - rabbitmq
    volumes:
      - ./producer:/app
      - ./rabbitmq:/app/rabbitmq
      - ./common:/app/common
      - ./producer/persistence/producer_worker3:/app/persistence

  consumer_worker:
    build:
      context: ./consumer
      dockerfile: Dockerfile
    environment:
      - MONITORING_QUEUE=monitoring_queue
      - CONSUMER_QUEUE=test_queue
      - SENTINEL_PORT=9002
      - OUTPUT_FILE=/app/output/received_messages.txt
      - EXPECTED_PRODUCERS=3
    ports:
      - "9002:9002"
    depends_on:
      - rabbitmq
      - producer_worker1
      - producer_worker2
      - producer_worker3
    volumes:
      - ./consumer:/app
      - ./rabbitmq:/app/rabbitmq
      - ./common:/app/common
      - ./consumer/persistence:/app/persistence

  sentinel1:
    build:
      context: ./sentinel
      dockerfile: Dockerfile
    environment:
      - WORKER_HOSTS=producer_worker1
      - WORKER_PORTS=9001
      - CHECK_INTERVAL=5
      - SERVICE_NAME=sentinel1
      - PEER_PORT=9010
      - RESTART_ATTEMPTS=2
      - RESTART_COOLDOWN=5
      - COMPOSE_PROJECT_NAME=fault_tolerance
    depends_on:
      - producer_worker1
    volumes:
      - ./sentinel:/app
      - ./common:/app/common
      - /var/run/docker.sock:/var/run/docker.sock  # Give access to Docker socket
    deploy:
      replicas: 2

  sentinel2:
    build:
      context: ./sentinel
      dockerfile: Dockerfile
    environment:
      - WORKER_HOSTS=consumer_worker
      - WORKER_PORTS=9002
      - CHECK_INTERVAL=5
      - SERVICE_NAME=sentinel2
      - PEER_PORT=9010
      - RESTART_ATTEMPTS=2
      - RESTART_COOLDOWN=5
      - COMPOSE_PROJECT_NAME=fault_tolerance
    depends_on:
      - consumer_worker
    volumes:
      - ./sentinel:/app
      - ./common:/app/common
      - /var/run/docker.sock:/var/run/docker.sock  # Give access to Docker socket
    deploy:
      replicas: 2

  sentinel3:
    build:
      context: ./sentinel
      dockerfile: Dockerfile
    environment:
      - WORKER_HOSTS=producer_worker2
      - WORKER_PORTS=9011
      - CHECK_INTERVAL=5
      - SERVICE_NAME=sentinel3
      - PEER_PORT=9010
      - RESTART_ATTEMPTS=2
      - RESTART_COOLDOWN=5
      - COMPOSE_PROJECT_NAME=fault_tolerance
    depends_on:
      - producer_worker2
    volumes:
      - ./sentinel:/app
      - ./common:/app/common
      - /var/run/docker.sock:/var/run/docker.sock
    deploy:
      replicas: 2

  sentinel4:
    build:
      context: ./sentinel
      dockerfile: Dockerfile
    environment:
      - WORKER_HOSTS=producer_worker3
      - WORKER_PORTS=9012
      - CHECK_INTERVAL=5
      - SERVICE_NAME=sentinel4
      - PEER_PORT=9010
      - RESTART_ATTEMPTS=2
      - RESTART_COOLDOWN=5
      - COMPOSE_PROJECT_NAME=fault_tolerance
    depends_on:
      - producer_worker3
    volumes:
      - ./sentinel:/app
      - ./common:/app/common
      - /var/run/docker.sock:/var/run/docker.sock
    deploy:
      replicas: 2